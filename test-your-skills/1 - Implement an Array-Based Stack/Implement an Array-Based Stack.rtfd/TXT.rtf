{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red21\green22\blue24;\red255\green255\blue255;
\red87\green92\blue96;\red163\green85\blue14;\red67\green0\blue197;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c10980\c11373\c12157;\cssrgb\c100000\c100000\c100000;
\cssrgb\c41569\c43529\c45098;\cssrgb\c70588\c41176\c5490;\cssrgb\c33725\c14118\c81569;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid101\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid201\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\paperw11900\paperh16840\margl1440\margr1440\vieww20880\viewh14800\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs57\fsmilli28800 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Tarea: Implement an Array-Based Stack\

\f1\b0\fs32 \cf3 \cb4 \strokec3 120 minutos para finalizar\cb1 \
\
\cb4 80 soluciones del estudiante\cb1 \
\cb4 The stack is a collection of objects that are added and removed according to the last-in, first-out (LIFO) principle. New elements are added to the top of the Stack. You may only access or remove the most recently inserted object.\
\pard\pardeftab720\partightenfactor0
\cf3 \cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs57\fsmilli28800 \cf3 \cb4 Instrucciones de tareas\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf3 \cb4 120 minutos para finalizar\cb1 \
\
\cb4 80 soluciones del estudiante\cb1 \
\
\cb4 Implement the Stack as a generic structure that provides the following methods:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f2\fs28\fsmilli14400 \cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 // add element to the top of the stack\cf3 \cb1 \strokec3 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 func push(_ element: T)\cb1 \
\ls1\ilvl0\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \'a0\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 // remove the top element and return it; return nil if the stack is empty\cf3 \cb1 \strokec3 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 func pop() -> T?\cb1 \
\ls1\ilvl0\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \'a0\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 // return the top element or nil if the stack is empty\cf3 \cb1 \strokec3 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 func peek() -> T?\cb1 \
\ls1\ilvl0\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \'a0\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 // return the number of elements in the Stack\cf3 \cb1 \strokec3 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf6 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 var\cf3 \strokec3  count: Int\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \'a0\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 // true if the stack is empty\cf3 \cb1 \strokec3 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf6 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 var\cf3 \strokec3  isEmpty: Bool\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 {{\NeXTGraphic 2018-04-06_17-24-58-d2da7cc7bd4b32f01832dc91fde6ba40.png \width30800 \height10680 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf3 \cb4 \strokec3 \
\
\
\pard\pardeftab720\sa192\partightenfactor0

\f0\b\fs38\fsmilli19200 \cf3 \cb4 \strokec3 Preguntas de esta tarea\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 \cb4 \strokec3 Implement\'a0an\'a0array-based generic*\'a0stack structure.\'a0\cb1 \
\cb4 (*)The stack needs to work with any data type.\cb1 \
\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs57\fsmilli28800 \cf3 \cb4 \'bfQu\'e9 tal te fue?\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 Compara el ejemplo del instructor con el tuyo\
\pard\pardeftab720\partightenfactor0
\cf3 \cb1 \
\
\pard\pardeftab720\sa192\partightenfactor0

\f0\b\fs38\fsmilli19200 \cf3 \cb4 \strokec3 Ejemplo del instructor\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf4 \strokec4 {{\NeXTGraphic 2593074_5cf2_9.jpg \width1000 \height1000 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://meli.udemy.com/user/karolynyisztor/"}}{\fldrslt \cf7 \cb4 \strokec7 Karoly Nyisztor \'95 Professional Software Architect}}\
\pard\pardeftab720\partightenfactor0
\cf3 \cb4 Implement\'a0an\'a0array-based generic*\'a0stack structure.\'a0\cb1 \
\cb4 (*)The stack needs to work with any data type.\cb1 \
\cb4 Hints:\cb1 \
\cb4 Implement the Stack as a generic structure.\cb1 \
\cb4 Use a private property of type\'a0Array to store the elements of the Stack. The Array supports adding elements using the\'a0
\f2 \cf3 \cb4 \strokec3 append(_:)
\f1 \cf3 \cb4 \strokec3 \'a0 method to the end of the list. You can also rely on the Array's built-in\'a0
\f2 \cf3 \cb4 \strokec3 popLast()
\f1 \cf3 \cb4 \strokec3 \'a0 method and its\'a0
\f2 \cf3 \cb4 \strokec3 last
\f1 \cf3 \cb4 \strokec3 \'a0 property to implement the Stack methods.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs33\fsmilli16800 \cf3 \cb4 \strokec3 Descargar archivos de recursos\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\f1\b0\fs38\fsmilli19200 \cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 \uc0\u8232 \cb4 Stack.playground.zip\cb1 \uc0\u8232 
\fs32 \cf3 \strokec3 \
\pard\tx566\pardeftab720\partightenfactor0
\cf3 \
Ejemplos: \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://meli.udemy.com/user/victor-mendes-7/"}}{\fldrslt \cf7 \cb4 \strokec7 Victor Mendes}}\cf3 \strokec3 \
\cb4 Publicado\'a0hace 23 d\'edas\cb1 \
\cb4 Implement\'a0an\'a0array-based generic*\'a0stack structure.\'a0\cb1 \
\cb4 (*)The stack needs to work with any data type.\cb1 \
\cb4 import Foundation\cb1 \
\
\cb4 final class GenericStack<T> \{\cb1 \
\cb4 private var array: [T]\cb1 \
\
\cb4 var count: Int \{\cb1 \
\cb4 array.count\cb1 \
\cb4 \}\cb1 \
\
\cb4 var isEmpty: Bool \{\cb1 \
\cb4 array.isEmpty\cb1 \
\cb4 \}\cb1 \
\
\cb4 func push(_ element: T) \{\cb1 \
\cb4 array.append(element)\cb1 \
\cb4 \}\cb1 \
\
\cb4 func pop() -> T? \{\cb1 \
\cb4 guard !array.isEmpty else \{ return nil \}\cb1 \
\cb4 let lastItem = array.last\cb1 \
\cb4 array.remove(at: array.endIndex - 1)\cb1 \
\cb4 return lastItem\cb1 \
\cb4 \}\cb1 \
\
\cb4 func peek() -> T? \{\cb1 \
\cb4 guard !array.isEmpty else \{ return nil \}\cb1 \
\cb4 return array.last\cb1 \
\cb4 \}\cb1 \
\
\cb4 init (elements: [T]) \{\cb1 \
\cb4 array = elements\cb1 \
\cb4 \}\cb1 \
\cb4 \}\cb1 \
\cb4 Give Feedback\cb1 \
\cb4 What went well? What could be improved?\cb1 \
\pard\tx566\pardeftab720\partightenfactor0
\cf3 \strokec3 \
}